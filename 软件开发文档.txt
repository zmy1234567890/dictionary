## 背单词软件开发文档

### 一、项目概述

本项目旨在开发一款跨平台的背单词软件，帮助用户有效地记忆和复习英文单词。软件采用 Python 实现 UI 前端，C 语言实现后端核心逻辑，使用 SQLite 或 MySQL 作为数据存储方案，支持在 Windows、Linux、鲲鹏云平台及安卓手机上运行。

### 二、需求分析

#### 1. 目标用户

外语学习者，特别是大学生。

#### 2. 功能需求

* 英汉词典查询：输入英文，显示中文解释与例句。
* 背单词模式：中→英、英→中两种方向，可选择或输入答案。
* 用户账户管理：支持多用户登录与学习记录管理。
* 记忆曲线复习：基于艾宾浩斯曲线推送复习任务。
* 学习统计：提供学习进度、正确率等可视化数据。
* 扩展功能（选做）：单词发音、学习计划管理、词库编辑、AI拼写矫正等。

#### 3. 非功能需求

* 支持多平台部署。
* 数据存储可靠，操作安全。
* 具有良好的用户交互体验。

### 三、软件设计

#### 1. 总体架构

```
+------------------+        +------------------+
|   Python UI 层   |<------>| C 后端逻辑库     |
+------------------+        +------------------+
        |                            |
        v                            v
+------------------+        +------------------+
| SQLite/MySQL 数据库 |        | Android 打包层（选做）|
+------------------+        +------------------+
```

#### 2. 模块划分

* UI层（Python）：登录界面、查询界面、测试界面、统计界面。
* 后端逻辑（C语言）：账户管理、词库管理、答题判定、记忆曲线算法。
* 数据存储：本地 SQLite 或远程 MySQL。
* 平台兼容模块：通过打包工具分别支持多平台运行。

#### 3. 关键数据结构设计

* 单词结构：

```c
typedef struct {
    char english[64];
    char chinese[128];
    char example[256];
    char example_trans[256];
} Word;
```

* 用户结构：

```c
typedef struct {
    char username[32];
    int correct_count;
    int total_count;
    int review_schedule[200];
} User;
```

#### 4. 核心算法：记忆曲线推送算法（简化）

```pseudo
for each word in user_word_list:
    if today - last_review_date >= interval:
        push_to_today_review_list()
```

### 四、软件实现

* 使用 `ctypes` 将 C 编译的动态链接库与 Python 进行绑定。
* 使用 PyQt5 构建图形界面，实现良好的交互。
* 使用 SQLite 完成本地词库与用户数据管理，也可切换至 MySQL。

### 五、软件测试

* 单元测试：对 C 语言模块函数、Python 控制逻辑进行逐一验证。
* 集成测试：测试各模块联动效果，确保 UI 与后端通信顺畅。
* 用户测试：模拟学生日常使用情景，记录 BUG 与优化点。

### 六、项目展示与总结

* 每位成员负责模块说明和演示展示；
* 汇报项目亮点如：“跨语言协同、高效复习调度算法”；
* 展示运行演示、测试结果截图、统计图等；
* 提出未来扩展计划（如支持语音识别、生成个性化学习计划等）。
